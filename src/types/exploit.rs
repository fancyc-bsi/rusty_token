// src/types/exploit.rs
use std::hash::{Hash, Hasher};

use serde::Serialize;

#[derive(Debug, Clone, Serialize)]
pub struct ExploitResult {
    pub forged_token: String,
    pub technique: String,
    pub description: String,
    pub success: bool,
}

impl PartialEq for ExploitResult {
    fn eq(&self, other: &Self) -> bool {
        self.forged_token == other.forged_token
            && self.technique == other.technique
            && self.description == other.description
            && self.success == other.success
    }
}

impl Eq for ExploitResult {}

impl Hash for ExploitResult {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.forged_token.hash(state);
        self.technique.hash(state);
        self.description.hash(state);
        self.success.hash(state);
    }
}
